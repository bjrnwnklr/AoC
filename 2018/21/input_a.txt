#ip 4
0   seti 123 0 3            --- stores 123 into r3
1   bani 3 456 3            --- bin and of r3 and 456 into r3
2   eqri 3 72 3             --- compares r3 with 72 (1 into r3 for True)
3   addr 3 4 4              --- add r3 into r4 (the ip) incr r4 by 1, skipping i4
4   seti 0 0 4                  --- go back to start (i1 - endless loop)
5   seti 0 5 3              --- set r3 to 0 (reset r3)

6   bori 3 65536 2          --- bin or of r3 (0) w 65536 into r2
7   seti 10736359 9 3       --- set r3 to 10736359

8   bani 2 255 1            --- bin and of r2 (65536) w 255 into r1 = 0
9   addr 3 1 3              --- add r3 to r1 into r3 (r3 stays 10736359)
10  bani 3 16777215 3       --- bin and of r3 (107...) w 16777215 --- does nothing!
11  muli 3 65899 3          --- mult r3 (107...) w 65889 into r3 (707515...)
12  bani 3 16777215 3       --- bin and of r3 (707...) w 167777215 into r3 (=3345805)

                            r1 = r2 & 255
                            r3 = r3 + r1
                            r3 = r3 & 16777215
                            r3 = r3 * 65899
                            r3 = r3 & 16777215

                            r2 has to be < 256 here!

13  gtir 256 2 1            --- if 256 > r2 (65536) - 1 into r1 (is not...)
14  addr 1 4 4              --- jump to 16 if 13 = True
15  addi 4 1 4              --- jump to 17 if not (skipping 16)
16  seti 27 2 4                 --- jump to 28 if 13 true
17  seti 0 3 1              --- set r1 to 0 (already 0)

18  addi 1 1 5              --- write r1 + 1 into 5 (=1)
19  muli 5 256 5            --- mult r5 (1) with 256
20  gtrr 5 2 5              --- if r5 (256 * i) > r2 (65536) r5=1
21  addr 5 4 4                  --- jump to 23 if 20 true
22  addi 4 1 4              --- jump to 24 if 20 not true 
23  seti 25 8 4                 --- jump to 26 if 20 true
24  addi 1 1 1              --- incr r1 by 1
25  seti 17 6 4             --- go back to 18

                        loop 18-25 increases r1 256 times 
                        then 257 * 256 > 65536
                        then jumps to 26

26  setr 1 5 2              --- copy r1 to r2 (r1 = 256)
27  seti 7 7 4              --- jump to 8

28  eqrr 3 0 1              --- only time r0 is used!
                            --- if r3 == r0 (0) write 1 to r1
29  addr 1 4 4              --- add 1 to r4 (ip) --- jump to end
30  seti 5 1 4                  --- go to step 6


Part 1 answer: 16311888 as r0 - should stop after ca 1850 instructions
